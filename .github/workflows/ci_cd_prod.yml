name: Continuous integration and deployment for production
on:
  push:
    branches:
      - release

env:
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: write
  attestations: write

jobs:
  build_test_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Env
        run: cp .env_template .env

      - name: Build
        run: make all

      - name: Lint
        run: make lint

      - name: Check
        run: make check

      - name: Migrate
        run: make migrate

      - name: Test
        run: make test

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to registry
        run: |
          docker tag django-ninja-project:latest ${{ env.REGISTRY }}/project/django-ninja-project:release-$GITHUB_SHA
          docker push ${{ env.REGISTRY }}/project/django-ninja-project:release-$GITHUB_SHA
          echo "Image pushed to ${{ env.REGISTRY }}/project/django-ninja-project:release-$GITHUB_SHA"

      - name: Restart server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_SSH_PORT }}
          script: |
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin
            docker stop django-ninja-project 1> /dev/null 2>&1
            docker rm django-ninja-project 1> /dev/null 2>&1
            docker rmi $(docker images | grep 'project') 1> /dev/null 2>&1
            docker pull ${{ env.REGISTRY }}/project/django-ninja-project:release-${{ github.sha }}
            
            echo "# Autogenerated .env file" > .env
            echo "DEBUG=False" >> .env
            echo "CLIENT_DOMAIN=example.com" >> .env
            echo "API_URL=api.example.com" >> .env
            echo "CORS_ALLOWED_ORIGINS=https://www.example.com,https://example.com" >> .env
            echo "SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}" >> .env
            echo "ALLOWED_HOSTS=${{ secrets.PROD_ALLOWED_HOSTS }}" >> .env
            echo "DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}" >> .env
            echo "EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}" >> .env
            echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
            echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env
            echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
            echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
            echo "EMAIL_BACKEND=${{ secrets.EMAIL_BACKEND }}" >> .env
            echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env
            echo "LOG_LEVEL=WARNING" >> .env
            
            docker run --rm --name django-ninja-project-migrator --env-file .env ${{ env.REGISTRY }}/project/django-ninja-project:release-${{ github.sha }} ./manage.py migrate
            
            docker run --rm --name django-ninja-project-collectstatic --env-file .env -v /var/www/api/static:/project/collectstatic ${{ env.REGISTRY }}/project/django-ninja-project:release-${{ github.sha }} ./manage.py collectstatic --noinput
            
            docker run -d --name django-ninja-project --env-file .env --restart on-failure --net host -v /var/www/api/media:/project/media --log-driver=loki --log-opt loki-url="http://localhost:3100/loki/api/v1/push" ${{ env.REGISTRY }}/project/django-ninja-project-backend:release-${{ github.sha }} gunicorn --bind 0.0.0.0:8000 project.wsgi:application
