[tool.poetry]
name = "project"
version = "0.1.0"
description = "Backend application for django-ninja-project"
authors = ["Davit Tovmasyan <davitovmasyan@gmail.com>"]
readme = "README.md"
packages = [
    { include = "core", from = "apps" },
    { include = "project" },
]

[tool.poetry.dependencies]
python = "^3.12"
django = "^5.0.4"
django-environ = "^0.11.2"
django-ninja = "^1.1.0"
pillow = "^10.3.0"
gunicorn = "^22.0.0"
psycopg = { extras = ["binary"], version = "^3.1.18" }
django-cors-headers = "^4.3.1"
django-ninja-jwt = "^5.3.1"
pydantic = {extras = ["email"], version = "^2.7.1"}
requests = "^2.32.0"
django-countries = "^7.6.1"


[tool.poetry.group.dev.dependencies]
ruff = "^0.4.3"
pytest = "^8.2.0"
pytest-django = "^4.8.0"
pytest-cov = "^5.0.0"
factory-boy = "^3.3.0"
django-extensions = "^3.2.3"
django-debug-toolbar = "^4.3.0"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "**/migrations/*.py",
]

src = ["project/**/*.py", "apps/**/*.py"]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "A", # prevent using keywords that clobber python builtins
    "B", # bugbear: security warnings
    "E", # pycodestyle
    "F", # pyflakes
    "ISC", # implicit string concatenation
    "UP", # alert you when better syntax is available in your python version
    "RUF", # the ruff developer's own rules
]

ignore = [
    "UP032", # Use f-string instead of `format` call
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF001",
    "B010",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
force-single-line = true
combine-as-imports = true
force-sort-within-sections = true
order-by-type = false
known-local-folder = ["pytest", "_pytest"]
lines-after-imports = 2

[tool.ruff.lint.pycodestyle]
# In order to be able to format for 88 char in ruff format
max-line-length = 120

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
# 4. Ignore `E402` (import violations) in all `__init__.py` files, and in select subdirectories.

[tool.pytest.ini_options]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test", "Acceptance"]
python_functions = ["test"]
# NOTE: "doc" is not included here, but gets tested explicitly via "doctesting".
testpaths = ["*"]
norecursedirs = [
  "testing/example_scripts",
  ".*",
  "build",
  "dist",
]
xfail_strict = true
filterwarnings = [
    "ignore::DeprecationWarning",
]

[tool.coverage.report]
omit = [
    "**/migrations/**",
    "**/management/commands/**",
    "**/__init__.py",
    "**/admin.py",
]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "def __str__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

ignore_errors = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
